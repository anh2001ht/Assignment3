@model List<Assignment3.ViewModels.CategoryReportViewModel>

@{
    ViewData["Title"] = "Category Report";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-tags"></i> Category Report</h2>
            <p class="text-muted">Analytics and insights by event categories</p>
        </div>
        <div class="btn-group" role="group">
            <a asp-action="Dashboard" class="btn btn-outline-primary">
                <i class="fas fa-chart-bar"></i> Dashboard
            </a>
            <a asp-action="ExportCategoryReport" class="btn btn-outline-success">
                <i class="fas fa-download"></i> Export CSV
            </a>
        </div>
    </div>

    <!-- Summary Statistics -->
    @if (Model.Any())
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body text-center">
                        <h3>@Model.Count</h3>
                        <p class="mb-0">Total Categories</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body text-center">
                        <h3>@Model.Sum(c => c.EventCount)</h3>
                        <p class="mb-0">Total Events</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <h3>@Model.Sum(c => c.TotalAttendees)</h3>
                        <p class="mb-0">Total Attendees</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body text-center">
                        <h3>@(Model.Sum(c => c.EventCount) > 0 ? Math.Round((double)Model.Sum(c => c.TotalAttendees) / Model.Sum(c => c.EventCount), 1) : 0)</h3>
                        <p class="mb-0">Avg Attendees per Event</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Category Performance Chart -->
    @if (Model.Any())
    {
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-chart-bar"></i> Category Performance</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="categoryChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-crown"></i> Top Performing Categories</h5>
                    </div>
                    <div class="card-body">
                        @{
                            var topCategories = Model.OrderByDescending(c => c.TotalAttendees).Take(5);
                        }
                        @foreach (var category in topCategories)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <strong>@category.CategoryName</strong>
                                    <span class="badge badge-primary">@category.TotalAttendees attendees</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar bg-primary" 
                                         style="width: @((double)category.TotalAttendees / Model.Max(c => c.TotalAttendees) * 100)%"></div>
                                </div>
                                <small class="text-muted">@category.EventCount events</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Categories Table -->
    <div class="card">
        <div class="card-header">
            <h5><i class="fas fa-list"></i> Category Details</h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="categoriesTable">
                        <thead class="thead-dark">
                            <tr>
                                <th><i class="fas fa-tag"></i> Category</th>
                                <th class="text-center"><i class="fas fa-calendar-alt"></i> Events</th>
                                <th class="text-center"><i class="fas fa-users"></i> Total Attendees</th>
                                <th class="text-center"><i class="fas fa-chart-line"></i> Avg per Event</th>
                                <th class="text-center"><i class="fas fa-percentage"></i> Attendance Rate</th>
                                <th class="text-center"><i class="fas fa-trophy"></i> Popularity Score</th>
                                <th class="text-center"><i class="fas fa-cog"></i> Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Model.OrderByDescending(c => c.TotalAttendees))
                            {
                                var avgAttendees = category.EventCount > 0 ? (double)category.TotalAttendees / category.EventCount : 0;
                                var popularityScore = (category.EventCount * 0.3) + (category.TotalAttendees * 0.7);
                                var attendanceRate = category.EventCount > 0 ? (double)category.TotalAttendees / (category.EventCount * 50) * 100 : 0; // Assuming max 50 per event
                                
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-info text-white rounded-circle d-flex align-items-center justify-content-center mr-2" 
                                                 style="width: 35px; height: 35px; font-size: 14px; font-weight: bold;">
                                                @category.CategoryName?.Substring(0, 1).ToUpper()
                                            </div>
                                            <strong>@category.CategoryName</strong>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge badge-primary badge-lg">@category.EventCount</span>
                                    </td>
                                    <td class="text-center">
                                        <strong>@category.TotalAttendees</strong>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge badge-info">@Math.Round(avgAttendees, 1)</span>
                                    </td>
                                    <td class="text-center">
                                        <div class="progress" style="width: 60px; height: 20px; margin: 0 auto;">
                                            <div class="progress-bar @(attendanceRate > 75 ? "bg-success" : attendanceRate > 50 ? "bg-warning" : "bg-danger")" 
                                                 style="width: @Math.Min(attendanceRate, 100)%"></div>
                                        </div>
                                        <small>@Math.Round(Math.Min(attendanceRate, 100), 0)%</small>
                                    </td>
                                    <td class="text-center">
                                        <div class="d-flex justify-content-center align-items-center">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                var starClass = popularityScore >= i * 20 ? "fas fa-star text-warning" : "far fa-star text-muted";
                                                <i class="@starClass"></i>
                                            }
                                        </div>
                                        <small>@Math.Round(popularityScore, 0) pts</small>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a href="/Events?category=@category.CategoryName" class="btn btn-outline-primary" title="View Events">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <button type="button" class="btn btn-outline-info" title="Analyze Category" 
                                                    onclick="analyzeCategory('@category.CategoryName')">
                                                <i class="fas fa-chart-line"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-tags fa-5x text-muted mb-3"></i>
                    <h3 class="text-muted">No Categories Found</h3>
                    <p class="lead text-muted">There are no event categories to display.</p>
                </div>
            }
        </div>
    </div>

    <!-- Category Insights -->
    @if (Model.Any())
    {
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-lightbulb"></i> Category Insights</h5>
                    </div>
                    <div class="card-body">
                        @{
                            var mostPopular = Model.OrderByDescending(c => c.TotalAttendees).First();
                            var mostEvents = Model.OrderByDescending(c => c.EventCount).First();
                            var bestAverage = Model.Where(c => c.EventCount > 0).OrderByDescending(c => (double)c.TotalAttendees / c.EventCount).FirstOrDefault();
                            var leastPopular = Model.OrderBy(c => c.TotalAttendees).First();
                        }
                        
                        <div class="row">
                            <div class="col-12 mb-3">
                                <div class="alert alert-success">
                                    <strong><i class="fas fa-star"></i> Most Popular:</strong> 
                                    @mostPopular.CategoryName with @mostPopular.TotalAttendees total attendees
                                </div>
                            </div>
                            <div class="col-12 mb-3">
                                <div class="alert alert-info">
                                    <strong><i class="fas fa-calendar-check"></i> Most Active:</strong> 
                                    @mostEvents.CategoryName with @mostEvents.EventCount events
                                </div>
                            </div>
                            @if (bestAverage != null)
                            {
                                <div class="col-12 mb-3">
                                    <div class="alert alert-primary">
                                        <strong><i class="fas fa-chart-line"></i> Best Average:</strong> 
                                        @bestAverage.CategoryName with @Math.Round((double)bestAverage.TotalAttendees / bestAverage.EventCount, 1) attendees per event
                                    </div>
                                </div>
                            }
                            <div class="col-12">
                                <div class="alert alert-warning">
                                    <strong><i class="fas fa-exclamation-triangle"></i> Needs Attention:</strong> 
                                    @leastPopular.CategoryName - only @leastPopular.TotalAttendees total attendees
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-chart-pie"></i> Category Distribution</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="categoryPieChart" width="400" height="400"></canvas>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Export Options -->
    @if (Model.Any())
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5><i class="fas fa-download"></i> Export Options</h5>
                <p class="text-muted">Download the category report in various formats.</p>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-success" onclick="exportToCSV()">
                        <i class="fas fa-file-csv"></i> Export to CSV
                    </button>
                    <button type="button" class="btn btn-outline-primary" onclick="printReport()">
                        <i class="fas fa-print"></i> Print Report
                    </button>
                    <a asp-action="ExportCategoryReport" class="btn btn-outline-secondary">
                        <i class="fas fa-download"></i> Download CSV File
                    </a>
                    <button type="button" class="btn btn-outline-info" onclick="generateInsightReport()">
                        <i class="fas fa-lightbulb"></i> Generate Insights
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Chart.js for charts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- DataTables for sorting and filtering -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap4.min.css">
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap4.min.js"></script>

<script>
    $(document).ready(function() {
        $('#categoriesTable').DataTable({
            "order": [[ 2, "desc" ]], // Sort by total attendees descending
            "pageLength": 10,
            "responsive": true,
            "language": {
                "search": "Search categories:",
                "lengthMenu": "Show _MENU_ categories per page",
                "info": "Showing _START_ to _END_ of _TOTAL_ categories"
            }
        });

        // Initialize charts
        initializeCategoryChart();
        initializePieChart();
    });

    function initializeCategoryChart() {
        const ctx = document.getElementById('categoryChart').getContext('2d');
        const data = {
            labels: [@Html.Raw(string.Join(",", Model.Select(c => $"'{c.CategoryName}'")))],
            datasets: [{
                label: 'Events',
                data: [@Html.Raw(string.Join(",", Model.Select(c => c.EventCount)))],
                backgroundColor: 'rgba(54, 162, 235, 0.8)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
                yAxisID: 'y'
            }, {
                label: 'Attendees',
                data: [@Html.Raw(string.Join(",", Model.Select(c => c.TotalAttendees)))],
                backgroundColor: 'rgba(255, 99, 132, 0.8)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                yAxisID: 'y1'
            }]
        };

        new Chart(ctx, {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Events and Attendees by Category'
                    }
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Number of Events'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Number of Attendees'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                }
            }
        });
    }

    function initializePieChart() {
        const ctx = document.getElementById('categoryPieChart').getContext('2d');
        const data = {
            labels: [@Html.Raw(string.Join(",", Model.Select(c => $"'{c.CategoryName}'")))],
            datasets: [{
                data: [@Html.Raw(string.Join(",", Model.Select(c => c.TotalAttendees)))],
                backgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#4BC0C0',
                    '#9966FF',
                    '#FF9F40',
                    '#FF6384',
                    '#C9CBCF'
                ]
            }]
        };

        new Chart(ctx, {
            type: 'pie',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Attendee Distribution by Category'
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    function exportToCSV() {
        let csv = 'Category Name,Event Count,Total Attendees,Average Attendees per Event\n';
        @foreach (var category in Model)
        {
            var avgAttendees = category.EventCount > 0 ? (double)category.TotalAttendees / category.EventCount : 0;
            <text>
            csv += '"@category.CategoryName","@category.EventCount","@category.TotalAttendees","@Math.Round(avgAttendees, 2)"\n';
            </text>
        }

        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'category_report_@(DateTime.Now.ToString("yyyyMMdd")).csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    function printReport() {
        window.print();
    }

    function analyzeCategory(categoryName) {
        alert(`Detailed analysis for ${categoryName} category would be shown here.\n\nThis feature could include:\n- Trend analysis\n- Seasonal patterns\n- Comparison with other categories\n- Growth predictions`);
    }

    function generateInsightReport() {
        alert('Advanced insights report would be generated here.\n\nThis could include:\n- Category performance trends\n- Recommendations for improvement\n- Market opportunities\n- Resource allocation suggestions');
    }
</script>

<style>
    @@media print {
        .btn, .card-footer, .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter, .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            display: none !important;
        }
        
        .table {
            font-size: 12px;
        }
        
        canvas {
            max-height: 300px !important;
        }
    }
    
    .badge-lg {
        font-size: 1rem;
        padding: 0.5rem 0.75rem;
    }
</style> 