@model Assignment3.ViewModels.EventAnalyticsViewModel

@{
    ViewData["Title"] = "Event Analytics";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-chart-line"></i> Event Analytics</h2>
            <p class="text-muted">Detailed performance analytics and insights for events</p>
        </div>
        <div class="btn-group" role="group">
            <a asp-action="Dashboard" class="btn btn-outline-primary">
                <i class="fas fa-chart-bar"></i> Dashboard
            </a>
            <a asp-action="UserActivity" class="btn btn-outline-info">
                <i class="fas fa-users"></i> User Activity
            </a>
            <a asp-action="ExportEventAnalytics" class="btn btn-outline-success">
                <i class="fas fa-download"></i> Export CSV
            </a>
        </div>
    </div>

    <!-- Performance Summary -->
    @if (Model.EventPerformance.Any())
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body text-center">
                        <h3>@Model.EventPerformance.Count</h3>
                        <p class="mb-0">Total Events</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body text-center">
                        <h3>@Model.EventPerformance.Sum(e => e.AttendeeCount)</h3>
                        <p class="mb-0">Total Attendees</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <h3>@Math.Round(Model.EventPerformance.Average(e => e.RegistrationRate), 1)%</h3>
                        <p class="mb-0">Avg Registration Rate</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body text-center">
                        <h3>@Math.Round(Model.EventPerformance.Average(e => e.AttendeeCount), 1)</h3>
                        <p class="mb-0">Avg Attendees per Event</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Event Performance Chart -->
    @if (Model.EventPerformance.Any())
    {
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-chart-bar"></i> Event Performance Overview</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="eventPerformanceChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-trophy"></i> Top Performing Events</h5>
                    </div>
                    <div class="card-body">
                        @{
                            var topEvents = Model.EventPerformance.OrderByDescending(e => e.AttendeeCount).Take(5);
                        }
                        @foreach (var eventItem in topEvents)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <strong class="text-truncate" style="max-width: 150px;" title="@eventItem.EventTitle">
                                        @eventItem.EventTitle
                                    </strong>
                                    <span class="badge badge-primary">@eventItem.AttendeeCount</span>
                                </div>
                                <div class="progress" style="height: 6px;">
                                    <div class="progress-bar bg-primary" 
                                         style="width: @((double)eventItem.AttendeeCount / Model.EventPerformance.Max(e => e.AttendeeCount) * 100)%"></div>
                                </div>
                                <small class="text-muted">@eventItem.RegistrationRate% registration rate</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Event Performance Table -->
    <div class="card mb-4">
        <div class="card-header">
            <h5><i class="fas fa-table"></i> Event Performance Details</h5>
        </div>
        <div class="card-body">
            @if (Model.EventPerformance.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="eventPerformanceTable">
                        <thead class="thead-dark">
                            <tr>
                                <th><i class="fas fa-calendar-alt"></i> Event</th>
                                <th class="text-center"><i class="fas fa-users"></i> Attendees</th>
                                <th class="text-center"><i class="fas fa-percentage"></i> Registration Rate</th>
                                <th class="text-center"><i class="fas fa-chart-line"></i> Performance Score</th>
                                <th class="text-center"><i class="fas fa-star"></i> Rating</th>
                                <th class="text-center"><i class="fas fa-calendar"></i> Date</th>
                                <th class="text-center"><i class="fas fa-cog"></i> Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var eventItem in Model.EventPerformance.OrderByDescending(e => e.AttendeeCount))
                            {
                                var performanceScore = (eventItem.AttendeeCount * 0.6) + (eventItem.RegistrationRate * 0.4);
                                var rating = Math.Min(5, Math.Ceiling(performanceScore / 20));
                                var ratingClass = rating >= 4 ? "success" : rating >= 3 ? "warning" : "danger";
                                
                                <tr>
                                    <td>
                                        <div>
                                            <strong>@eventItem.EventTitle</strong>
                                            <br>
                                            <small class="text-muted">ID: @eventItem.EventID</small>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge badge-primary badge-lg">@eventItem.AttendeeCount</span>
                                    </td>
                                    <td class="text-center">
                                        <div class="progress" style="width: 60px; height: 20px; margin: 0 auto;">
                                            <div class="progress-bar @(eventItem.RegistrationRate > 75 ? "bg-success" : eventItem.RegistrationRate > 50 ? "bg-warning" : "bg-danger")" 
                                                 style="width: @eventItem.RegistrationRate%"></div>
                                        </div>
                                        <small>@eventItem.RegistrationRate%</small>
                                    </td>
                                    <td class="text-center">
                                        <div class="progress" style="width: 80px; height: 15px; margin: 0 auto;">
                                            <div class="progress-bar bg-@(performanceScore > 75 ? "success" : performanceScore > 50 ? "warning" : "danger")" 
                                                 style="width: @Math.Min(performanceScore, 100)%"></div>
                                        </div>
                                        <small>@Math.Round(performanceScore, 1)</small>
                                    </td>
                                    <td class="text-center">
                                        <div class="d-flex justify-content-center align-items-center">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                var starClass = i <= rating ? "fas fa-star text-warning" : "far fa-star text-muted";
                                                <i class="@starClass" style="font-size: 12px;"></i>
                                            }
                                        </div>
                                        <small class="text-@ratingClass">@rating/5</small>
                                    </td>
                                    <td class="text-center">
                                        <small class="text-muted">
                                            @eventItem.StartTime.ToString("MMM dd, yyyy")
                                        </small>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a href="/Events/Details/@eventItem.EventID" class="btn btn-outline-primary" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <button type="button" class="btn btn-outline-info" title="Analyze Event" 
                                                    onclick="analyzeEvent(@eventItem.EventID, '@eventItem.EventTitle')">
                                                <i class="fas fa-chart-line"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-calendar-times fa-5x text-muted mb-3"></i>
                    <h3 class="text-muted">No Event Data Available</h3>
                    <p class="lead text-muted">There are no events to analyze at this time.</p>
                </div>
            }
        </div>
    </div>

    <div class="row">
        <!-- Popular Time Slots -->
        @if (Model.PopularTimeSlots.Any())
        {
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-clock"></i> Popular Time Slots</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="timeSlotChart" width="400" height="300"></canvas>
                        
                        <div class="mt-3">
                            @foreach (var timeSlot in Model.PopularTimeSlots.Take(5))
                            {
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span><strong>@timeSlot.TimeSlot</strong></span>
                                        <span class="badge badge-info">@timeSlot.EventCount events</span>
                                    </div>
                                    <div class="progress" style="height: 5px;">
                                        <div class="progress-bar bg-info" 
                                             style="width: @((double)timeSlot.EventCount / Model.PopularTimeSlots.Max(t => t.EventCount) * 100)%"></div>
                                    </div>
                                    <small class="text-muted">@timeSlot.TotalAttendees total attendees</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Attendance by Category -->
        @if (Model.AttendanceByCategory.Any())
        {
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-tags"></i> Attendance by Category</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="categoryAttendanceChart" width="400" height="300"></canvas>
                        
                        <div class="mt-3">
                            @foreach (var category in Model.AttendanceByCategory.OrderByDescending(c => c.TotalAttendees).Take(5))
                            {
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span><strong>@category.CategoryName</strong></span>
                                        <span class="badge badge-success">@category.TotalAttendees attendees</span>
                                    </div>
                                    <div class="progress" style="height: 5px;">
                                        <div class="progress-bar bg-success" 
                                             style="width: @((double)category.TotalAttendees / Model.AttendanceByCategory.Max(c => c.TotalAttendees) * 100)%"></div>
                                    </div>
                                    <small class="text-muted">@category.EventCount events</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Analytics Insights -->
    @if (Model.EventPerformance.Any())
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5><i class="fas fa-lightbulb"></i> Analytics Insights</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        @{
                            var bestPerformingEvent = Model.EventPerformance.OrderByDescending(e => e.AttendeeCount).First();
                            var highestRegistrationRate = Model.EventPerformance.OrderByDescending(e => e.RegistrationRate).First();
                            var averageAttendance = Model.EventPerformance.Average(e => e.AttendeeCount);
                            var lowPerformingEvents = Model.EventPerformance.Count(e => e.AttendeeCount < averageAttendance);
                        }
                        
                        <div class="alert alert-success">
                            <strong><i class="fas fa-trophy"></i> Best Performing Event:</strong><br>
                            @bestPerformingEvent.EventTitle with @bestPerformingEvent.AttendeeCount attendees
                        </div>
                        
                        <div class="alert alert-info">
                            <strong><i class="fas fa-percentage"></i> Highest Registration Rate:</strong><br>
                            @highestRegistrationRate.EventTitle with @highestRegistrationRate.RegistrationRate% rate
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="alert alert-primary">
                            <strong><i class="fas fa-chart-line"></i> Average Performance:</strong><br>
                            @Math.Round(averageAttendance, 1) attendees per event on average
                        </div>
                        
                        <div class="alert alert-warning">
                            <strong><i class="fas fa-exclamation-triangle"></i> Needs Attention:</strong><br>
                            @lowPerformingEvents events are below average attendance
                        </div>
                    </div>
                </div>
                
                <!-- Recommendations -->
                <div class="mt-3">
                    <h6><i class="fas fa-recommendations"></i> Recommendations:</h6>
                    <ul class="list-unstyled">
                        @if (Model.PopularTimeSlots.Any())
                        {
                            var bestTimeSlot = Model.PopularTimeSlots.OrderByDescending(t => t.TotalAttendees).First();
                            <li><i class="fas fa-clock text-info"></i> <strong>Optimal Timing:</strong> Schedule more events at @bestTimeSlot.TimeSlot for better attendance</li>
                        }
                        @if (Model.AttendanceByCategory.Any())
                        {
                            var popularCategory = Model.AttendanceByCategory.OrderByDescending(c => c.TotalAttendees).First();
                            <li><i class="fas fa-tag text-success"></i> <strong>Popular Category:</strong> Focus on @popularCategory.CategoryName events for higher engagement</li>
                        }
                        <li><i class="fas fa-chart-line text-primary"></i> <strong>Performance:</strong> Events with @Math.Round(Model.EventPerformance.Average(e => e.RegistrationRate), 0)%+ registration rates tend to perform better</li>
                        <li><i class="fas fa-users text-warning"></i> <strong>Capacity:</strong> Consider smaller venues for events with consistently low attendance</li>
                    </ul>
                </div>
            </div>
        </div>
    }

    <!-- Export Options -->
    @if (Model.EventPerformance.Any())
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5><i class="fas fa-download"></i> Export & Actions</h5>
                <p class="text-muted">Export analytics data and generate reports.</p>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-success" onclick="exportToCSV()">
                        <i class="fas fa-file-csv"></i> Export to CSV
                    </button>
                    <button type="button" class="btn btn-outline-primary" onclick="printReport()">
                        <i class="fas fa-print"></i> Print Report
                    </button>
                    <a asp-action="ExportEventAnalytics" class="btn btn-outline-secondary">
                        <i class="fas fa-download"></i> Download Full Report
                    </a>
                    <button type="button" class="btn btn-outline-info" onclick="generatePredictiveAnalysis()">
                        <i class="fas fa-crystal-ball"></i> Predictive Analysis
                    </button>
                    <button type="button" class="btn btn-outline-warning" onclick="optimizationSuggestions()">
                        <i class="fas fa-magic"></i> Optimization Tips
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Chart.js for charts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- DataTables for sorting and filtering -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap4.min.css">
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap4.min.js"></script>

<script>
    $(document).ready(function() {
        $('#eventPerformanceTable').DataTable({
            "order": [[ 1, "desc" ]], // Sort by attendee count descending
            "pageLength": 15,
            "responsive": true,
            "language": {
                "search": "Search events:",
                "lengthMenu": "Show _MENU_ events per page",
                "info": "Showing _START_ to _END_ of _TOTAL_ events"
            }
        });

        // Initialize charts
        initializeEventPerformanceChart();
        if (document.getElementById('timeSlotChart')) {
            initializeTimeSlotChart();
        }
        if (document.getElementById('categoryAttendanceChart')) {
            initializeCategoryAttendanceChart();
        }
    });

    function initializeEventPerformanceChart() {
        const ctx = document.getElementById('eventPerformanceChart').getContext('2d');
        const data = {
            labels: [@Html.Raw(string.Join(",", Model.EventPerformance.Take(10).Select(e => $"'{e.EventTitle.Substring(0, Math.Min(15, e.EventTitle.Length))}...'")))],
            datasets: [{
                label: 'Attendees',
                data: [@Html.Raw(string.Join(",", Model.EventPerformance.Take(10).Select(e => e.AttendeeCount)))],
                backgroundColor: 'rgba(54, 162, 235, 0.8)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
                yAxisID: 'y'
            }, {
                label: 'Registration Rate (%)',
                data: [@Html.Raw(string.Join(",", Model.EventPerformance.Take(10).Select(e => e.RegistrationRate)))],
                backgroundColor: 'rgba(255, 99, 132, 0.8)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                yAxisID: 'y1'
            }]
        };

        new Chart(ctx, {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Event Performance: Attendees vs Registration Rate'
                    }
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Number of Attendees'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Registration Rate (%)'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                }
            }
        });
    }

    function initializeTimeSlotChart() {
        const ctx = document.getElementById('timeSlotChart').getContext('2d');
        const data = {
            labels: [@Html.Raw(string.Join(",", Model.PopularTimeSlots.Select(t => $"'{t.TimeSlot}'")))],
            datasets: [{
                data: [@Html.Raw(string.Join(",", Model.PopularTimeSlots.Select(t => t.EventCount)))],
                backgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#4BC0C0',
                    '#9966FF',
                    '#FF9F40'
                ]
            }]
        };

        new Chart(ctx, {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Events by Time Slot'
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    function initializeCategoryAttendanceChart() {
        const ctx = document.getElementById('categoryAttendanceChart').getContext('2d');
        const data = {
            labels: [@Html.Raw(string.Join(",", Model.AttendanceByCategory.Select(c => $"'{c.CategoryName}'")))],
            datasets: [{
                data: [@Html.Raw(string.Join(",", Model.AttendanceByCategory.Select(c => c.TotalAttendees)))],
                backgroundColor: [
                    '#28a745',
                    '#17a2b8',
                    '#ffc107',
                    '#dc3545',
                    '#6f42c1',
                    '#fd7e14'
                ]
            }]
        };

        new Chart(ctx, {
            type: 'pie',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Attendance Distribution by Category'
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    function exportToCSV() {
        let csv = 'Event ID,Event Title,Attendee Count,Registration Rate,Event Date\n';
        @foreach (var eventItem in Model.EventPerformance)
        {
            <text>
            csv += '"@eventItem.EventID","@eventItem.EventTitle","@eventItem.AttendeeCount","@eventItem.RegistrationRate","@eventItem.StartTime.ToString("yyyy-MM-dd")"\n';
            </text>
        }

        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'event_analytics_@(DateTime.Now.ToString("yyyyMMdd")).csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    function printReport() {
        window.print();
    }

    function analyzeEvent(eventId, eventTitle) {
        alert(`Detailed analysis for: ${eventTitle}\n\nThis would show:\n- Attendance trends\n- Registration patterns\n- Demographic breakdown\n- Engagement metrics\n- Comparison with similar events`);
    }

    function generatePredictiveAnalysis() {
        alert('Predictive Analysis Report\n\nThis would include:\n- Future attendance predictions\n- Optimal event scheduling\n- Resource allocation recommendations\n- Market trend analysis');
    }

    function optimizationSuggestions() {
        alert('Event Optimization Suggestions\n\nThis could include:\n- Best time slots for different categories\n- Venue capacity recommendations\n- Marketing strategy insights\n- Pricing optimization tips');
    }
</script>

<style>
    @@media print {
        .btn, .card-footer, .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter, .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            display: none !important;
        }
        
        .table {
            font-size: 12px;
        }
        
        canvas {
            max-height: 300px !important;
        }
    }
    
    .badge-lg {
        font-size: 1rem;
        padding: 0.5rem 0.75rem;
    }

    .text-truncate {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
</style> 